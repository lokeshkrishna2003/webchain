Better install tailwindcss  in to your project based on which framework your are using (go to framework guides in tailwind css main page)
and dont use any # or symbols expecially # while naming a folder , that includes in path for project directory       

                        writing block chain code

hardhat:

Hardhat is a development environment and toolset for Ethereum smart contract development.
It provides a robust and extensible framework for writing, testing, and deploying smart contracts.
Hardhat is highly popular in the Ethereum development community and is frequently used for both local and production development.

@nomiclabs/hardhat-waffle:

This is a Hardhat plugin that integrates the Waffle testing framework into Hardhat.
Waffle is a testing library for Ethereum smart contracts that provides a wide range of utilities for testing contracts, including support for TypeScript.

ethereum-waffle:

Ethereum Waffle is a library that works alongside Waffle and provides additional testing utilities for Ethereum smart contracts.
It simplifies the process of writing comprehensive unit tests for Ethereum contracts.
chai:

Chai is a popular assertion library for JavaScript and TypeScript.
In the context of Ethereum smart contract testing, Chai is often used in combination with Waffle to make assertions about the behavior of smart contracts in test cases.

@nomiclabs/hardhat-ethers:

This is another plugin for Hardhat, and it provides integration with the ethers.js library.
ethers.js is a widely-used JavaScript library for interacting with Ethereum networks and writing Ethereum smart contracts.
With this plugin, you can easily deploy and interact with smart contracts using ethers.js within your Hardhat project.

ethers:

ethers.js, mentioned earlier, is a library for Ethereum development.
It provides an easy-to-use and well-documented interface for Ethereum interactions, including deploying smart contracts, sending transactions, and querying the Ethereum blockchain.






                                deploy.js code
                                
const hre = require("hardhat");

async function main() {
  const currentTimestampInSeconds = Math.round(Date.now() / 1000);
  const unlockTime = currentTimestampInSeconds + 60;

  const lockedAmount = hre.ethers.parseEther("0.001");

  const lock = await hre.ethers.deployContract("Lock", [unlockTime], {
    value: lockedAmount,
  });

  await lock.waitForDeployment();

  console.log(
    `Lock with ${ethers.formatEther(
      lockedAmount
    )}ETH and unlock timestamp ${unlockTime} deployed to ${lock.target}`
  );
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});



                        transactioncontext.js
import React, { useState, useEffect, createContext } from "react";
import { ethers, parseUnits } from "ethers";
import { contractAddress, contractABI } from "../utils/constants";

export const TransactionContext = createContext();

const { ethereum } = window;

// Connecting to Ethereum contract
const getEthereumContract = () => {
  if (typeof ethereum === "undefined") {
    // Handle the case where MetaMask is not installed or not available
    console.error("MetaMask is not installed or not available.");
    return;
  }

  const provider = new ethers.BrowserProvider(window.ethereum);
  const signer = provider.getSigner();
  const transactionContract = new ethers.Contract(
    contractAddress,
    contractABI,
    signer
  );

  return transactionContract;
};

export const TransactionProvider = ({ children }) => {
  const [transactionCount, setTransactionCount] = useState(
    localStorage.getItem("transactionCount")
  );
  const [connectedAccount, setConnectedAccount] = useState("");
  const [formData, setFormData] = useState({
    addressTo: "",
    amount: "",
    Keyword: "",
    message: "",
  });
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e, name) => {
    setFormData((prevState) => ({ ...prevState, [name]: e.target.value }));
  };

  const checkIfWalletIsConnected = async () => {
    try {
      if (!ethereum) return alert("Please install MetaMask");
      const accounts = await ethereum.request({ method: "eth_accounts" });
      console.log(accounts);
      if (accounts.length) {
        setConnectedAccount(accounts[0]);
      } else {
        console.log("No accounts found");
      }
    } catch (error) {
      console.error(error);
      throw new Error("No Ethereum object");
    }
  };

  const connectWallet = async () => {
    try {
      if (!ethereum) return alert("Please install MetaMask");
      const accounts = await ethereum.request({ method: "eth_requestAccounts" });
      setConnectedAccount(accounts[0]);
    } catch (error) {
      console.error(error);
      throw new Error("No Ethereum object");
    }
  };

  const sendTransaction = async () => {
    try {
      if (!ethereum) return alert("Please install MetaMask");
      // Get the data from the form from the user...
      const { addressTo, amount, Keyword, message } = formData;
      const parsedAmount = ethers.utils.parseEther(amount.toString());
      ;
      console.log("Parsed amount:", parsedAmount.toString());
      const transactionContract = getEthereumContract();
      await ethereum.request({
        method: "eth_sendTransaction",
        params: [
          {
            from: connectedAccount,
            to: addressTo,
            gas: "0x5208", // 21000 gwei (gwei is a subunit of Ethereum)
            value: parsedAmount.toHexString(), // Use toHexString to get the value as a hex string
          },
        ],
      });
      const transactionHash = await transactionContract.addToBlockChain(
        addressTo,
        parsedAmount,
        message,
        Keyword
      );
      setIsLoading(true);
      console.log(`Loading - ${transactionHash.hash}`);
      await transactionHash.wait();
      setIsLoading(false);
      console.log(`Success - ${transactionHash.hash}`);
      const transactionCount = await transactionContract.getTransactionCount();
      setTransactionCount(transactionCount.toNumber());
    } catch (error) {
      console.error(error);
      throw new Error("No Ethereum object or error in sending transaction");
    }
  };

  useEffect(() => {
    checkIfWalletIsConnected();
  }, []);

  return (
    <TransactionContext.Provider
      value={{
        connectWallet,
        connectedAccount,
        formData,
        setFormData,
        handleChange,
        sendTransaction,
      }}
    >
      {children}
    </TransactionContext.Provider>
  );
};
